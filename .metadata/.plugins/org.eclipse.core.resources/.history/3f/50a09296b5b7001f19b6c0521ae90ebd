import java.io.*;
import java.net.*;
import java.util.*;

public class ServerThread extends Thread {
    private final Socket connection;
    private final List<User> users; // shared list of registered users
    private final List<HealthAndSafetyReports> reports;
    private ObjectOutputStream out;
    private ObjectInputStream in;

    public ServerThread(Socket connection, List<User> users, List<HealthAndSafetyReports> reports) {
        this.connection = connection;
        this.users = users;
        this.reports = reports;
    }

    @Override
    public void run() {
        try {
            // Input and output streams
            out = new ObjectOutputStream(connection.getOutputStream());
            out.flush();
            in = new ObjectInputStream(connection.getInputStream());

            boolean loggedIn = false;
            User currentUser = null;

            // Menu 1: Login/Register
            do {
                sendMessage("Welcome to the Health and Safety Reporting System");
                sendMessage("Please choose an option:");
                sendMessage("1. Log-In");
                sendMessage("2. Register");
                sendMessage("-1. Exit");

                String choice = (String) in.readObject();

                switch (choice) {
                    case "1":
                        currentUser = handleLogin();
                        if (currentUser != null) {
                            loggedIn = true;
                        }
                        break;
                    case "2":
                        handleRegistration();
                        break;
                    case "-1":
                        sendMessage("Goodbye!");
                        return;
                    default:
                        sendMessage("Invalid choice. Please enter 1, 2, or -1.");
                        break;
                }
            } while (!loggedIn);

            // Menu 2: Logged-in options
            while (loggedIn) {
                sendMessage("Choose an option:");
                sendMessage("1. Create a Health and Safety Report");
                sendMessage("2. Retrieve all Accident Reports");
                sendMessage("3. Assign a health & safety Report");
                sendMessage("4. View all reports assigned to me");
                sendMessage("5. Update password");
                sendMessage("6. Exit");

                String choice = (String) in.readObject();

                switch (choice) {
                    case "1":
                        createHealthAndSafetyReport(currentUser);
                        break;
                    case "2":
                        retrieveAccidentReports();
                        break;
                    case "3":
                        assignReport();
                        break;
                    case "4":
                        viewMyReports(currentUser);
                        break;
                    case "5":
                        updatePassword(currentUser);
                        break;
                    case "6":
                        sendMessage("Goodbye, " + currentUser.getName() + "!");
                        loggedIn = false;
                        break;
                    default:
                        sendMessage("Invalid choice. Please try again.");
                        break;
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            closeConnection();
        }
    }

    private User handleLogin() throws IOException, ClassNotFoundException {
        sendMessage("Enter Email:");
        String email = (String) in.readObject();

        sendMessage("Enter Password:");
        String password = (String) in.readObject();

        synchronized (users) {
            return users.stream()
                    .filter(u -> u.getEmail().equals(email) && u.getPassword().equals(password))
                    .findFirst()
                    .orElseGet(() -> {
                        sendMessage("Invalid Email or Password. Please try again.");
                        return null;
                    });
        }
    }

    private void handleRegistration() throws IOException, ClassNotFoundException {
        sendMessage("Enter your Name:");
        String name = (String) in.readObject();

        sendMessage("Enter your Employee ID:");
        int employeeID = Integer.parseInt((String) in.readObject());

        sendMessage("Enter your Email:");
        String email = (String) in.readObject();

        sendMessage("Enter your Password:");
        String password = (String) in.readObject();

        sendMessage("Enter your Department Name:");
        String departmentName = (String) in.readObject();

        sendMessage("Enter your Role:");
        String role = (String) in.readObject();

        synchronized (users) {
            boolean exists = users.stream()
                    .anyMatch(u -> u.getEmail().equals(email) || u.getEmployeeID() == employeeID);

            if (exists) {
                sendMessage("Registration failed: Email or Employee ID already exists.");
            } else {
                users.add(new User(name, employeeID, email, password, departmentName, role));
                sendMessage("Registration successful! Please log in.");
            }
        }
    }

    private void createHealthAndSafetyReport(User currentUser) throws IOException, ClassNotFoundException {
        sendMessage("Enter Report Type (1 for Accident, 2 for Risk):");
        String reportType = (String) in.readObject();

        sendMessage("Enter Report Date (YYYY-MM-DD):");
        String date = (String) in.readObject();

        HealthAndSafetyReports newReport = new HealthAndSafetyReports(
                reportType,
                date,
                UUID.randomUUID().toString(),
                String.valueOf(currentUser.getEmployeeID()),
                currentUser.getEmployeeID()
        );

        synchronized (reports) {
            reports.add(newReport);
        }

        sendMessage("Report created successfully! " + newReport);
    }

    private void retrieveAccidentReports() throws IOException {
        sendMessage("List of Accident Reports:");
        synchronized (reports) {
            boolean hasReports = false;
            for (HealthAndSafetyReports report : reports) {
                if ("Accident".equals(report.getType())) {
                    sendMessage(report.toString());
                    hasReports = true;
                }
            }
            if (!hasReports) {
                sendMessage("No accident reports found.");
            }
        }
    }

    private void assignReport() throws IOException, ClassNotFoundException {
        sendMessage("Enter the ID of the report to assign:");
        String reportId = (String) in.readObject();

        sendMessage("Enter the Employee ID to assign this report:");
        int assignTo = Integer.parseInt((String) in.readObject());

        synchronized (reports) {
            for (HealthAndSafetyReports report : reports) {
                if (report.getReportID().equals(reportId)) {
                    report.setAssignedTo(assignTo);
                    report.setStatus("Assigned");
                    sendMessage("Report successfully assigned to Employee ID: " + assignTo);
                    return;
                }
            }
        }
        sendMessage("Report ID not found.");
    }

    private void viewMyReports(User currentUser) throws IOException {
        sendMessage("List of Reports assigned to you:");
        synchronized (reports) {
            boolean hasReports = false;
            for (HealthAndSafetyReports report : reports) {
                if (report.getAssignedTo() == currentUser.getEmployeeID()) {
                    sendMessage(report.toString());
                    hasReports = true;
                }
            }
            if (!hasReports) {
                sendMessage("No reports assigned to you.");
            }
        }
    }

    private void updatePassword(User currentUser) throws IOException, ClassNotFoundException {
        sendMessage("Enter current password:");
        String currentPassword = (String) in.readObject();

        if (currentPassword.equals(currentUser.getPassword())) {
            sendMessage("Enter new password:");
            String newPassword = (String) in.readObject();
            currentUser.setPassword(newPassword);
            sendMessage("Password updated successfully.");
        } else {
            sendMessage("Current password is incorrect.");
        }
    }

    private void sendMessage(String msg) {
        try {
            out.writeObject(msg);
            out.flush();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    private void closeConnection() {
        try {
            if (in != null) in.close();
            if (out != null) out.close();
            if (connection != null) connection.close();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
}
