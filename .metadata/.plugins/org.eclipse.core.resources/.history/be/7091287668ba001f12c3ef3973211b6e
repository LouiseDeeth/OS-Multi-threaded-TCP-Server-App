import java.io.*;
import java.util.*;

public class UserList {
    private LinkedList<User> list;

    public UserList() {
        list = new LinkedList<>();
        loadUsersFromFile();
    }

    private void loadUsersFromFile() {
        try (BufferedReader br = new BufferedReader(new FileReader("UserList.txt"))) {
            String fileContents;
            while ((fileContents = br.readLine()) != null) {
                String[] parts = fileContents.split("@"); // Using @ as delimiter based on User.toString()
                if (parts.length == 6) {
                    String name = parts[0];
                    int employeeID = Integer.parseInt(parts[1]);
                    String email = parts[2];
                    String password = parts[3];
                    String departmentName = parts[4];
                    String role = parts[5];
                    list.add(new User(name, employeeID, email, password, departmentName, role));
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("User list file not found. A new one will be created.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public synchronized void addUser(String name, int employeeID, String email, String password, String departmentName, String role) {
        User newUser = new User(name, employeeID, email, password, departmentName, role);
        list.add(newUser);
        saveUsersToFile();
    }

    private void saveUsersToFile() {
        try (FileWriter fw = new FileWriter("UserList.txt")) {
            for (User user : list) {
                fw.write(user.toString() + "\n");
            }
            System.out.println("User list updated successfully.");
        } catch (IOException e) {
            System.err.println("Error writing to user list file.");
            e.printStackTrace();
        }
    }

    public synchronized int getLength() {
        return list.size();
    }

    public synchronized User getUser(int index) {
        return list.get(index);
    }

    public synchronized Optional<User> findUserByEmail(String email) {
        return list.stream().filter(user -> user.getEmail().equals(email)).findFirst();
    }

    public synchronized boolean isEmployeeIDExists(int employeeID) {
        return list.stream().anyMatch(user -> user.getEmployeeID() == employeeID);
    }

    public synchronized List<User> getAllUsers() {
        return new ArrayList<>(list);
    }
}
