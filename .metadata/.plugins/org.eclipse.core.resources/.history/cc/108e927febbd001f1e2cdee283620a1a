import java.io.*;
import java.net.*;
import java.util.*;

public class ServerThread extends Thread {
	private final Socket connection;
	private final List<User> users; // shared list of registered users
	private final List<HealthAndSafetyReports> reports;
	private ObjectOutputStream out;
	private ObjectInputStream in;

	public ServerThread(Socket connection, List<User> users, List<HealthAndSafetyReports> reports) {
		this.connection = connection;
		this.users = users;
		this.reports = reports;
	}

    @Override
	public void run() {
		try {
			// Input and output streams
			out = new ObjectOutputStream(connection.getOutputStream());
			out.flush();
			in = new ObjectInputStream(connection.getInputStream());
			
			boolean loggedIn = false;
			User currentUser = null;

			do {
				// Welcome message
				sendMessage("Welcome to the Health and Safety Reporting System\nPlease choose an option\n1. Log-In\n2. Register\n-1. Exit");
				
				String choice = (String) in.readObject();

				switch (choice) {
					// Login
                case "1":
                    currentUser = handleLogin();
                    if (currentUser != null) {
                    	loggedIn = true;
                    }
                    break;
                    // Register
                case "2":
                    handleRegistration();
                    loggedIn = false;
                    break;
                case "-1":
                    sendMessage("Goodbye!");
                    return;
                default:
                    sendMessage("Invalid choice. Please enter 1, 2, or -1.");
                    break;
					}
				}while (!loggedIn);
    } catch (IOException | ClassNotFoundException e) {
        e.printStackTrace();
    } finally {
		// Closing connection
        closeConnection();
    }
}
	
    // Handle Login
	private User handleLogin() throws IOException, ClassNotFoundException {
        sendMessage("Enter Email:");
        String email = (String) in.readObject();

        sendMessage("Enter Password:");
        String password = (String) in.readObject();

        UserList userList = new UserList();
        Optional<User> user = userList.findUserByEmailAndPassword(email, password);

        if (user.isPresent()) {
            sendMessage("Login successful! Welcome back, " + user.get().getName());
            return user.get();
        } else {
            sendMessage("Invalid Email or Password. Please try again.");
            return null;
        }
    }
	
	// Handle Registration
	 private void handleRegistration() throws IOException, ClassNotFoundException {
	        sendMessage("Enter your Name:");
	        String name = (String) in.readObject();

	        sendMessage("Enter your Employee ID:");
	        int employeeID = Integer.parseInt((String) in.readObject());

	        sendMessage("Enter your Email:");
	        String email = (String) in.readObject();

	        sendMessage("Enter your Password:");
	        String password = (String) in.readObject();

	        sendMessage("Enter your Department Name:");
	        String departmentName = (String) in.readObject();

	        sendMessage("Enter your Role:");
	        String role = (String) in.readObject();
	        
            UserList userList = new UserList();

	        synchronized (users) {
	        	boolean emailExists = userList.findUserByEmailAndPassword(email, null).isPresent();
	            boolean idExists = userList.isEmailOrEmployeeIDExists(email, employeeID);

	            if (emailExists || idExists) {
	                sendMessage("Registration failed: Email or Employee ID already exists.");
	            } else {
	                User newUser = new User(name, employeeID, email, password, departmentName, role);
	                users.add(newUser);

	                // Save to file
	                userList.addUser(newUser);

	                sendMessage("Registration successful! Please log in.");
	            }
	        }
	    }
	    
		
	private void sendMessage(String msg) {
		try {
			out.writeObject(msg);
			out.flush();
			System.out.println("server>" + msg);
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}

	private void closeConnection() {
		try {
			in.close();
			out.close();
			connection.close();
		} catch (IOException ioException) {
			ioException.printStackTrace();
		}
	}
}
